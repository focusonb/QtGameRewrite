#pragma once
#include <QtCore>
#include <QtGui>
#include <QGraphicsView>
#include <map>

#include "../comStruct.h"
//#include "GameWidget.h"
//#include "struct_iswin.h"
//#include <utility>
using namespace std;
//struct cmp;
//extern struct  Threadarg_iswin;
class GameWidget;
class QMessageBox;


using MapPoint = map<QPointF, int, cmp>;



bool is_win(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, bool&myturn, const bool& gamegoingon);
bool check_row(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, bool&myturn);
bool Is_row_win(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, int i);
bool check_col(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, bool&myturn);
bool Is_col_win(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, int i);
bool check_obl(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, bool&myturn);
bool Is_obl_win(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, int i);
bool check_obl_a(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, bool&myturn);
bool Is_obl_win_a(QPointF& point_chess, MapPoint*&ptrchesses, qreal& chess_width, int i);
unsigned WINAPI iswin_func(void*arg);













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































